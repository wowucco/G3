# https://gqlgen.com/getting-started/

## product ##
type CharacteristicType {
  id: Int!
  name: String!
  isCustom: Boolean!
}

type Characteristic {
  id: Int!
  name: String!
  type: CharacteristicType!
  unit: Unit
}

type CharacteristicValue {
  id: Int!
  value: String!
  characteristic: Characteristic!
}

type Country {
  id: Int!
  name: String!
}

type Unit {
  id: Int!
  name: String!
}

type Price {
  price: String!
  salePrice: String
  saleCount: Int
  priceInCents: Int!
  salePriceInCents: Int
  currency: String!
}

type Brand {
  id: Int!
  name: String!
  slug: String!
}

type Category {
  id: Int!
  name: String!
  title: String!
  descriptinon: String
  slug: String!
}

type Group {
  id: Int!
  name: String!
  description: String
}

type Photo {
  id: Int!
  isMain: Boolean!
  sort: Int!
  small: String!
  thumb: String!
}

type Product {
  id: Int!
  name: String!
  description: String
  code: Int!
  exist: Int!
  status: Int!
  price: Price!
  brand: Brand
  category: Category
  group: Group!
  country: Country
  unit: Unit
  mainPhoto: Photo
  photos: [Photo]
  values: [CharacteristicValue]
}

type SimpleProduct {
  id: Int!
  name: String!
  description: String
  code: Int!
  exist: Int!
  status: Int!
  price: Price!
  brand: Brand
  category: Category
  group: Group!
  country: Country
  unit: Unit
  mainPhoto: Photo
}

type ExistProduct {
  exist: Boolean!
  id: Int!
}

type Pages {
  page: Int!
  perPage: Int!
  pageCount: Int!
  totalCount: Int!
  items: [Product!]
}

type PagesWithGroup {
  pages: Pages!
  group: Group!
}

type PagesWithGroups {
  pages: Pages!
  groups: [Group!]
}

input id {
  id: Int!
}

input ids {
  ids: [Int]!
}

input idWithLimit {
  id: Int!
  limit: Int!
}

input text {
  text: String!
}

input page {
  page: Int!
  perPage:Int!
}

input pageById {
  id: Int!
  page: Int!
  perPage:Int!
}

input pageByIds {
  ids: [Int]!
  page: Int!
  perPage:Int!
}

## menu ##
type TreeMenuItem {
  id: Int!
  name: String!
  description: String
  image: String
  parent: TreeParentMenuItem
  children: [TreeChildrenMenuItem]
  hasParent: Boolean!
  hasChildren: Boolean!
}

type TreeParentMenuItem {
  id: Int!
  name: String!
  image: String
  parent: TreeParentMenuItem
  hasParent: Boolean!
}

type TreeChildrenMenuItem {
  id: Int!
  name: String!
  image: String
  children: [TreeChildrenMenuItem]
  hasChildren: Boolean!
}

input TreeMenu {
  id: Int
  depht: Int
  parent: Boolean
}

# delivery
input cityId {
  id: String!
}

type City {
  id: String!,
  name: String!
}
type DeliveryMethod {
  id: Int!
  name: String!
  slug: String!
}
type PaymentMethod {
  id: Int!
  name: String!
  slug: String!
}
type Warehouse {
  id: String!
  name: String!
  address: String!
  phone: String!
  number: Int!
  maxWeight: Int!
}
type DeliveryInfo {
  deliveryMethod: DeliveryMethod!
  paymentMethods: [PaymentMethod]!
  warehouses: [Warehouse]!
}

type Query {
  product(input: id): Product
  products(input: page): Pages!
  productsByIds(input: ids): [Product]!
  productsByGroupId(input: pageById): PagesWithGroup!
  productsByGroupIds(input: pageByIds): PagesWithGroups!
  popular(input: page): Pages!
  sales(input: page): Pages!
  similar(input: id): [Product]!
  related(input: id): [Product]!
  popularByProductGroup(input: pageById): PagesWithGroup!
  popularByProductsGroups(input: pageByIds): PagesWithGroups!
  search(input: text): [Product]!
  exist(input: id): ExistProduct!

  #menu
  treeMenu(input: TreeMenu): TreeMenuItem

  #delivery
  searchCity(input: text): [City]!
  cityById(input: cityId): City!
  deliveryInfoByCityId(input: cityId): [DeliveryInfo]!
}